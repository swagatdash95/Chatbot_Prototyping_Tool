{"ast":null,"code":"var _jsxFileName = \"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/src/js/Components/DrawingContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useCallback } from 'react';\nimport ReactFlow, { applyEdgeChanges, applyNodeChanges } from 'react-flow-renderer';\nimport BotComponent from './BotComponent'; // const initialNodes = [\n//     {\n//         id: \"1\",\n//         type: \"input\", // input node\n//         data: { label: \"Input Node\" },\n//         position: { x: 100, y: 0 }\n//     },\n//     {\n//         id: \"2\",\n//         // data: { label: \"Input Node 2\" },\n//         data:{label: (\n//             <>\n//               <BotComponent />\n//             </>\n//           ),},\n//         position: { x: 120, y: 30 },\n//         style: {\n//             background: '#D6D5E6',\n//             width: 200,\n//           }\n//     }\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialEdges = [//   { id: 'e1-2', source: '1', target: '2' },\n];\n\nfunction Flow(_ref) {\n  _s();\n\n  let {\n    InitialNodes\n  } = _ref;\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const yPos = useRef(0);\n  const addNode = useCallback(() => {\n    yPos.current += 50;\n    setNodes(currentNodes => {\n      console.log(currentNodes);\n      return [...currentNodes, {\n        id: Math.random().toString(),\n        position: {\n          x: 100,\n          y: yPos.current\n        },\n        data: {\n          label: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(BotComponent, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)\n          }, void 0, false)\n        },\n        style: {\n          background: '#D6D5E6',\n          width: 200\n        }\n      }];\n    });\n  }, []);\n  const addEdge = useCallback(_ref2 => {\n    let {\n      source,\n      target\n    } = _ref2;\n    setEdges(edges => {\n      console.log(source, target);\n      return [...edges, {\n        id: Math.random().toString(),\n        source,\n        target\n      }];\n    });\n  }, []);\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), [setNodes]);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), [setEdges]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onConnect: addEdge,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNode,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Flow, \"i2rd+qCI1WtflDHlJn48Kr8ZNdU=\");\n\n_c = Flow;\nexport default Flow;\n\nvar _c;\n\n$RefreshReg$(_c, \"Flow\");","map":{"version":3,"names":["useState","useRef","useCallback","ReactFlow","applyEdgeChanges","applyNodeChanges","BotComponent","initialEdges","Flow","InitialNodes","nodes","setNodes","initialNodes","edges","setEdges","yPos","addNode","current","currentNodes","console","log","id","Math","random","toString","position","x","y","data","label","style","background","width","addEdge","source","target","onNodesChange","changes","nds","onEdgesChange","eds"],"sources":["/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/src/js/Components/DrawingContainer.js"],"sourcesContent":["import { useState, useRef, useCallback } from 'react';\nimport ReactFlow,  { applyEdgeChanges, applyNodeChanges } from 'react-flow-renderer';\nimport BotComponent from './BotComponent';\n\n// const initialNodes = [\n//     {\n//         id: \"1\",\n//         type: \"input\", // input node\n//         data: { label: \"Input Node\" },\n//         position: { x: 100, y: 0 }\n//     },\n//     {\n//         id: \"2\",\n//         // data: { label: \"Input Node 2\" },\n//         data:{label: (\n//             <>\n//               <BotComponent />\n//             </>\n//           ),},\n//         position: { x: 120, y: 30 },\n//         style: {\n//             background: '#D6D5E6',\n//             width: 200,\n//           }\n//     }\n// ];\n\nconst initialEdges = [\n//   { id: 'e1-2', source: '1', target: '2' },\n];\n\nfunction Flow({InitialNodes}) {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const yPos = useRef(0);\n\n  const addNode = useCallback(() => {\n    yPos.current += 50;\n    setNodes((currentNodes) => {\n      console.log(currentNodes);\n      return [\n        ...currentNodes,\n        {\n          id: Math.random().toString(),\n          position: { x: 100, y: yPos.current },\n          data:{label: (\n                <>\n                <BotComponent />\n                </>\n            )},\n            style: {\n                background: '#D6D5E6',\n                width: 200,\n            }\n        }\n      ];\n    });\n  }, []);\n\n  const addEdge = useCallback(({ source, target }) => {\n    setEdges((edges) => {\n      console.log(source, target);\n      return [\n        ...edges,\n        {\n          id: Math.random().toString(),\n          source,\n          target\n        }\n      ];\n    });\n  }, []);\n\n  const onNodesChange = useCallback(\n    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    [setNodes]\n  );\n  const onEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    [setEdges]\n  );\n\n\n  return (<><ReactFlow nodes={nodes} edges={edges} onConnect={addEdge} onNodesChange={onNodesChange} onEdgesChange={onEdgesChange}\n    fitView />\n  <button onClick={addNode}>Add</button></>);\n}\n\nexport default Flow;\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,OAAOC,SAAP,IAAqBC,gBAArB,EAAuCC,gBAAvC,QAA+D,qBAA/D;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,YAAY,GAAG,CACrB;AADqB,CAArB;;AAIA,SAASC,IAAT,OAA8B;EAAA;;EAAA,IAAhB;IAACC;EAAD,CAAgB;EAC5B,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACY,YAAD,CAAlC;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACO,YAAD,CAAlC;EACA,MAAMQ,IAAI,GAAGd,MAAM,CAAC,CAAD,CAAnB;EAEA,MAAMe,OAAO,GAAGd,WAAW,CAAC,MAAM;IAChCa,IAAI,CAACE,OAAL,IAAgB,EAAhB;IACAN,QAAQ,CAAEO,YAAD,IAAkB;MACzBC,OAAO,CAACC,GAAR,CAAYF,YAAZ;MACA,OAAO,CACL,GAAGA,YADE,EAEL;QACEG,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,EADN;QAEEC,QAAQ,EAAE;UAAEC,CAAC,EAAE,GAAL;UAAUC,CAAC,EAAEZ,IAAI,CAACE;QAAlB,CAFZ;QAGEW,IAAI,EAAC;UAACC,KAAK,eACL;YAAA,uBACA,QAAC,YAAD;cAAA;cAAA;cAAA;YAAA;UADA;QADD,CAHP;QAQIC,KAAK,EAAE;UACHC,UAAU,EAAE,SADT;UAEHC,KAAK,EAAE;QAFJ;MARX,CAFK,CAAP;IAgBD,CAlBO,CAAR;EAmBD,CArB0B,EAqBxB,EArBwB,CAA3B;EAuBA,MAAMC,OAAO,GAAG/B,WAAW,CAAC,SAAwB;IAAA,IAAvB;MAAEgC,MAAF;MAAUC;IAAV,CAAuB;IAClDrB,QAAQ,CAAED,KAAD,IAAW;MAClBM,OAAO,CAACC,GAAR,CAAYc,MAAZ,EAAoBC,MAApB;MACA,OAAO,CACL,GAAGtB,KADE,EAEL;QACEQ,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,EADN;QAEEU,MAFF;QAGEC;MAHF,CAFK,CAAP;IAQD,CAVO,CAAR;EAWD,CAZ0B,EAYxB,EAZwB,CAA3B;EAcA,MAAMC,aAAa,GAAGlC,WAAW,CAC9BmC,OAAD,IAAa1B,QAAQ,CAAE2B,GAAD,IAASjC,gBAAgB,CAACgC,OAAD,EAAUC,GAAV,CAA1B,CADU,EAE/B,CAAC3B,QAAD,CAF+B,CAAjC;EAIA,MAAM4B,aAAa,GAAGrC,WAAW,CAC9BmC,OAAD,IAAavB,QAAQ,CAAE0B,GAAD,IAASpC,gBAAgB,CAACiC,OAAD,EAAUG,GAAV,CAA1B,CADU,EAE/B,CAAC1B,QAAD,CAF+B,CAAjC;EAMA,oBAAQ;IAAA,wBAAE,QAAC,SAAD;MAAW,KAAK,EAAEJ,KAAlB;MAAyB,KAAK,EAAEG,KAAhC;MAAuC,SAAS,EAAEoB,OAAlD;MAA2D,aAAa,EAAEG,aAA1E;MAAyF,aAAa,EAAEG,aAAxG;MACR,OAAO;IADC;MAAA;MAAA;MAAA;IAAA,QAAF,eAER;MAAQ,OAAO,EAAEvB,OAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFQ;EAAA,gBAAR;AAGD;;GAvDQR,I;;KAAAA,I;AAyDT,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}