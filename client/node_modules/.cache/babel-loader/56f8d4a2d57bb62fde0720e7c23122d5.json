{"ast":null,"code":"var _jsxFileName = \"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/src/js/Pages/RunTime.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import nodeStructure from '../../nodesStructure.json';\n\nimport nodeStructure from '../../nodesStructureLong.json';\nimport ChatBubbleComponent from '../Components/RuntimeComponents/ChatBubbleComponent'; // class TreeNode {\n//   constructor(info) {\n//     this.label = info.data.label;\n//     this.id = info.id;\n//     this.name = info.name;\n//     this.type =  info.type;\n//     this.children = [];\n//   }\n// }    \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RunTime() {\n  _s();\n\n  console.log(nodeStructure);\n  const [executedStages, setExecutedStages] = useState([nodeStructure[0]]); // const nodes = JSON.parse(nodeStructure)\n\n  useEffect(() => {\n    return () => {\n      setExecutedStages(prevStage => {\n        console.log(prevStage);\n        let newStage = prevStage;\n\n        if (prevStage[prevStage.length - 1].type == \"startNode\" || prevStage[prevStage.length - 1].type == \"botNode\") {\n          for (let obj of nodeStructure) {\n            if (Object.values(prevStage[prevStage.length - 1].children[0])[0] == obj.id && prevStage[prevStage.length - 1] != obj) newStage = [...prevStage, obj];\n          }\n        }\n\n        return newStage;\n      });\n    };\n  }\n  /*, []*/\n  );\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" This is runtime page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), executedStages.map((currentStage, index) => {\n      // <p>{currentStage.text}</p>\n      // console.log(currentStage);\n      return /*#__PURE__*/_jsxDEV(ChatBubbleComponent, {\n        id: index,\n        currentStage: currentStage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true);\n}\n\n_s(RunTime, \"TjX2z7axo0yF3ZY3l/fsMvpm1BQ=\");\n\n_c = RunTime;\n\nvar _c;\n\n$RefreshReg$(_c, \"RunTime\");","map":{"version":3,"names":["React","useState","useEffect","nodeStructure","ChatBubbleComponent","RunTime","console","log","executedStages","setExecutedStages","prevStage","newStage","length","type","obj","Object","values","children","id","map","currentStage","index"],"sources":["/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/src/js/Pages/RunTime.js"],"sourcesContent":["import React,{useState,useEffect} from 'react';\n// import nodeStructure from '../../nodesStructure.json';\nimport nodeStructure from '../../nodesStructureLong.json';\nimport ChatBubbleComponent from '../Components/RuntimeComponents/ChatBubbleComponent';\n\n// class TreeNode {\n//   constructor(info) {\n//     this.label = info.data.label;\n//     this.id = info.id;\n//     this.name = info.name;\n//     this.type =  info.type;\n//     this.children = [];\n//   }\n// }    \n\nexport default function RunTime() {\n  console.log(nodeStructure)\n  const [executedStages, setExecutedStages] = useState([nodeStructure[0]])\n  // const nodes = JSON.parse(nodeStructure)\n  useEffect(() => {\n    return () => {\n      setExecutedStages(prevStage => {\n        console.log(prevStage)\n        let newStage = prevStage\n        if(prevStage[prevStage.length-1].type == \"startNode\" || prevStage[prevStage.length-1].type == \"botNode\")\n        { \n          for(let obj of nodeStructure)\n          {\n            if(Object.values(prevStage[prevStage.length-1].children[0])[0]==obj.id && prevStage[prevStage.length-1]!= obj)\n              newStage =  [...prevStage,obj]\n          } \n        }\n        return newStage\n\n      })\n    };\n  }/*, []*/)\n  return (\n    <>\n        <h1> This is runtime page</h1>\n        {executedStages.map((currentStage, index)=>{\n          // <p>{currentStage.text}</p>\n          // console.log(currentStage);\n          return <ChatBubbleComponent id={index} currentStage = {currentStage} />\n        })}\n    </>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC,C,CACA;;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,mBAAP,MAAgC,qDAAhC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,eAAe,SAASC,OAAT,GAAmB;EAAA;;EAChCC,OAAO,CAACC,GAAR,CAAYJ,aAAZ;EACA,MAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,CAACE,aAAa,CAAC,CAAD,CAAd,CAAD,CAApD,CAFgC,CAGhC;;EACAD,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXO,iBAAiB,CAACC,SAAS,IAAI;QAC7BJ,OAAO,CAACC,GAAR,CAAYG,SAAZ;QACA,IAAIC,QAAQ,GAAGD,SAAf;;QACA,IAAGA,SAAS,CAACA,SAAS,CAACE,MAAV,GAAiB,CAAlB,CAAT,CAA8BC,IAA9B,IAAsC,WAAtC,IAAqDH,SAAS,CAACA,SAAS,CAACE,MAAV,GAAiB,CAAlB,CAAT,CAA8BC,IAA9B,IAAsC,SAA9F,EACA;UACE,KAAI,IAAIC,GAAR,IAAeX,aAAf,EACA;YACE,IAAGY,MAAM,CAACC,MAAP,CAAcN,SAAS,CAACA,SAAS,CAACE,MAAV,GAAiB,CAAlB,CAAT,CAA8BK,QAA9B,CAAuC,CAAvC,CAAd,EAAyD,CAAzD,KAA6DH,GAAG,CAACI,EAAjE,IAAuER,SAAS,CAACA,SAAS,CAACE,MAAV,GAAiB,CAAlB,CAAT,IAAgCE,GAA1G,EACEH,QAAQ,GAAI,CAAC,GAAGD,SAAJ,EAAcI,GAAd,CAAZ;UACH;QACF;;QACD,OAAOH,QAAP;MAED,CAbgB,CAAjB;IAcD,CAfD;EAgBD;EAAA;EAjBQ,CAAT;EAkBA,oBACE;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAEKH,cAAc,CAACW,GAAf,CAAmB,CAACC,YAAD,EAAeC,KAAf,KAAuB;MACzC;MACA;MACA,oBAAO,QAAC,mBAAD;QAAqB,EAAE,EAAEA,KAAzB;QAAgC,YAAY,EAAID;MAAhD;QAAA;QAAA;QAAA;MAAA,QAAP;IACD,CAJA,CAFL;EAAA,gBADF;AAUD;;GAhCuBf,O;;KAAAA,O"},"metadata":{},"sourceType":"module"}