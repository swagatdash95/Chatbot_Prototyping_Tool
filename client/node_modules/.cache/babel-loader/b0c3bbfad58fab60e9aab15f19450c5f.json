{"ast":null,"code":"var _jsxFileName = \"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/src/js/Components/DrawingContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useCallback } from 'react';\nimport ReactFlow from 'react-flow-renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: \"1\",\n  type: \"input\",\n  // input node\n  data: {\n    label: \"Input Node\"\n  },\n  position: {\n    x: 100,\n    y: 0\n  }\n}, {\n  id: \"2\",\n  type: \"input\",\n  // input node\n  data: {\n    label: \"Input Node 2\"\n  },\n  position: {\n    x: 100,\n    y: 30\n  }\n}];\nconst initialEdges = [{\n  id: 'e1-2',\n  source: '1',\n  target: '2'\n}];\n\nfunction Flow() {\n  _s();\n\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const yPos = useRef(0);\n  const addNode = useCallback(() => {\n    yPos.current += 50;\n    setNodes(currentNodes => {\n      console.log(currentNodes);\n      return [...currentNodes, {\n        id: Math.random(),\n        position: {\n          x: 100,\n          y: yPos.current\n        },\n        data: {\n          label: \"yo\"\n        }\n      }];\n    });\n  }, []);\n  const addEdge = useCallback(_ref => {\n    let {\n      source,\n      target\n    } = _ref;\n    setEdges(edges => {\n      console.log(source, target);\n      return [...edges, {\n        id: Math.random(),\n        source,\n        target\n      }];\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onConnect: addEdge,\n      fitView: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNode,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Flow, \"65Yy+RX/8MD4x3Zr07lUbq5SAK8=\");\n\n_c = Flow;\nexport default Flow;\n\nvar _c;\n\n$RefreshReg$(_c, \"Flow\");","map":{"version":3,"names":["useState","useRef","useCallback","ReactFlow","initialNodes","id","type","data","label","position","x","y","initialEdges","source","target","Flow","nodes","setNodes","edges","setEdges","yPos","addNode","current","currentNodes","console","log","Math","random","addEdge"],"sources":["/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/src/js/Components/DrawingContainer.js"],"sourcesContent":["import { useState, useRef, useCallback } from 'react';\nimport ReactFlow from 'react-flow-renderer';\n\nconst initialNodes = [\n    {\n        id: \"1\",\n        type: \"input\", // input node\n        data: { label: \"Input Node\" },\n        position: { x: 100, y: 0 }\n    },\n    {\n        id: \"2\",\n        type: \"input\", // input node\n        data: { label: \"Input Node 2\" },\n        position: { x: 100, y: 30 }\n    }\n];\n\nconst initialEdges = [\n  { id: 'e1-2', source: '1', target: '2' },\n];\n\nfunction Flow() {\n  const [nodes, setNodes] = useState(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const yPos = useRef(0);\n\n  const addNode = useCallback(() => {\n    yPos.current += 50;\n    setNodes((currentNodes) => {\n      console.log(currentNodes);\n      return [\n        ...currentNodes,\n        {\n          id: Math.random(),\n          position: { x: 100, y: yPos.current },\n          data: { label: \"yo\" }\n        }\n      ];\n    });\n  }, []);\n\n  const addEdge = useCallback(({ source, target }) => {\n    setEdges((edges) => {\n      console.log(source, target);\n      return [\n        ...edges,\n        {\n          id: Math.random(),\n          source,\n          target\n        }\n      ];\n    });\n  }, []);\n\n\n  return (<><ReactFlow nodes={nodes} edges={edges} onConnect={addEdge} fitView />)\n  <button onClick={addNode}>Add</button></>);\n}\n\nexport default Flow;\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;;AAEA,MAAMC,YAAY,GAAG,CACjB;EACIC,EAAE,EAAE,GADR;EAEIC,IAAI,EAAE,OAFV;EAEmB;EACfC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAT,CAHV;EAIIC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAL;IAAUC,CAAC,EAAE;EAAb;AAJd,CADiB,EAOjB;EACIN,EAAE,EAAE,GADR;EAEIC,IAAI,EAAE,OAFV;EAEmB;EACfC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAT,CAHV;EAIIC,QAAQ,EAAE;IAAEC,CAAC,EAAE,GAAL;IAAUC,CAAC,EAAE;EAAb;AAJd,CAPiB,CAArB;AAeA,MAAMC,YAAY,GAAG,CACnB;EAAEP,EAAE,EAAE,MAAN;EAAcQ,MAAM,EAAE,GAAtB;EAA2BC,MAAM,EAAE;AAAnC,CADmB,CAArB;;AAIA,SAASC,IAAT,GAAgB;EAAA;;EACd,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAACI,YAAD,CAAlC;EACA,MAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAACY,YAAD,CAAlC;EACA,MAAMQ,IAAI,GAAGnB,MAAM,CAAC,CAAD,CAAnB;EAEA,MAAMoB,OAAO,GAAGnB,WAAW,CAAC,MAAM;IAChCkB,IAAI,CAACE,OAAL,IAAgB,EAAhB;IACAL,QAAQ,CAAEM,YAAD,IAAkB;MACzBC,OAAO,CAACC,GAAR,CAAYF,YAAZ;MACA,OAAO,CACL,GAAGA,YADE,EAEL;QACElB,EAAE,EAAEqB,IAAI,CAACC,MAAL,EADN;QAEElB,QAAQ,EAAE;UAAEC,CAAC,EAAE,GAAL;UAAUC,CAAC,EAAES,IAAI,CAACE;QAAlB,CAFZ;QAGEf,IAAI,EAAE;UAAEC,KAAK,EAAE;QAAT;MAHR,CAFK,CAAP;IAQD,CAVO,CAAR;EAWD,CAb0B,EAaxB,EAbwB,CAA3B;EAeA,MAAMoB,OAAO,GAAG1B,WAAW,CAAC,QAAwB;IAAA,IAAvB;MAAEW,MAAF;MAAUC;IAAV,CAAuB;IAClDK,QAAQ,CAAED,KAAD,IAAW;MAClBM,OAAO,CAACC,GAAR,CAAYZ,MAAZ,EAAoBC,MAApB;MACA,OAAO,CACL,GAAGI,KADE,EAEL;QACEb,EAAE,EAAEqB,IAAI,CAACC,MAAL,EADN;QAEEd,MAFF;QAGEC;MAHF,CAFK,CAAP;IAQD,CAVO,CAAR;EAWD,CAZ0B,EAYxB,EAZwB,CAA3B;EAeA,oBAAQ;IAAA,wBAAE,QAAC,SAAD;MAAW,KAAK,EAAEE,KAAlB;MAAyB,KAAK,EAAEE,KAAhC;MAAuC,SAAS,EAAEU,OAAlD;MAA2D,OAAO;IAAlE;MAAA;MAAA;MAAA;IAAA,QAAF,oBACR;MAAQ,OAAO,EAAEP,OAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADQ;EAAA,gBAAR;AAED;;GArCQN,I;;KAAAA,I;AAuCT,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}