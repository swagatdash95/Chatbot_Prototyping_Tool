{"ast":null,"code":"var _jsxFileName = \"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/src/js/Components/DrawingContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useCallback } from 'react';\nimport ReactFlow, { applyEdgeChanges, applyNodeChanges } from 'react-flow-renderer';\nimport BotComponent from './BotComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DrawingContainer(_ref) {\n  _s();\n\n  let {\n    nodes,\n    setNodes,\n    edges,\n    setEdges\n  } = _ref;\n  //   const [nodes, setNodes] = useState(initialNodes);\n  //   const [edges, setEdges] = useState([]);\n  //   const yPos = useRef(0);\n  //   const addNode = useCallback(() => {\n  //     yPos.current += 50;\n  //     setNodes((currentNodes) => {\n  //       console.log(currentNodes);\n  //       return [\n  //         ...currentNodes,\n  //         {\n  //           id: Math.random().toString(),\n  //           position: { x: 100, y: yPos.current },\n  //           data:{label: (\n  //                 <>\n  //                 <BotComponent />\n  //                 </>\n  //             )},\n  //             style: {\n  //                 background: '#D6D5E6',\n  //                 width: 200,\n  //             }\n  //         }\n  //       ];\n  //     });\n  //   }, []);\n  const addEdge = useCallback(_ref2 => {\n    let {\n      source,\n      target\n    } = _ref2;\n    setEdges(edges => {\n      console.log(source, target);\n      return [...edges, {\n        id: Math.random().toString(),\n        source,\n        target\n      }];\n    });\n  }, []);\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), [setNodes]);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), [setEdges]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onConnect: addEdge,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(DrawingContainer, \"3T2c69fFpuvaQiwFpqZ+vnKkbRA=\");\n\n_c = DrawingContainer;\nexport default DrawingContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrawingContainer\");","map":{"version":3,"names":["useState","useRef","useCallback","ReactFlow","applyEdgeChanges","applyNodeChanges","BotComponent","DrawingContainer","nodes","setNodes","edges","setEdges","addEdge","source","target","console","log","id","Math","random","toString","onNodesChange","changes","nds","onEdgesChange","eds"],"sources":["/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/src/js/Components/DrawingContainer.js"],"sourcesContent":["import { useState, useRef, useCallback } from 'react';\nimport ReactFlow,  { applyEdgeChanges, applyNodeChanges } from 'react-flow-renderer';\nimport BotComponent from './BotComponent';\n\n\nfunction DrawingContainer({nodes,setNodes, edges, setEdges}) {\n//   const [nodes, setNodes] = useState(initialNodes);\n//   const [edges, setEdges] = useState([]);\n//   const yPos = useRef(0);\n\n//   const addNode = useCallback(() => {\n//     yPos.current += 50;\n//     setNodes((currentNodes) => {\n//       console.log(currentNodes);\n//       return [\n//         ...currentNodes,\n//         {\n//           id: Math.random().toString(),\n//           position: { x: 100, y: yPos.current },\n//           data:{label: (\n//                 <>\n//                 <BotComponent />\n//                 </>\n//             )},\n//             style: {\n//                 background: '#D6D5E6',\n//                 width: 200,\n//             }\n//         }\n//       ];\n//     });\n//   }, []);\n\n  const addEdge = useCallback(({ source, target }) => {\n    setEdges((edges) => {\n      console.log(source, target);\n      return [\n        ...edges,\n        {\n          id: Math.random().toString(),\n          source,\n          target\n        }\n      ];\n    });\n  }, []);\n\n  const onNodesChange = useCallback(\n    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    [setNodes]\n  );\n  const onEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    [setEdges]\n  );\n\n\n  return (<><ReactFlow nodes={nodes} edges={edges} onConnect={addEdge} onNodesChange={onNodesChange} onEdgesChange={onEdgesChange}\n    fitView /></>);\n}\n\nexport default DrawingContainer;\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,OAAOC,SAAP,IAAqBC,gBAArB,EAAuCC,gBAAvC,QAA+D,qBAA/D;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;;AAGA,SAASC,gBAAT,OAA6D;EAAA;;EAAA,IAAnC;IAACC,KAAD;IAAOC,QAAP;IAAiBC,KAAjB;IAAwBC;EAAxB,CAAmC;EAC7D;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEE,MAAMC,OAAO,GAAGV,WAAW,CAAC,SAAwB;IAAA,IAAvB;MAAEW,MAAF;MAAUC;IAAV,CAAuB;IAClDH,QAAQ,CAAED,KAAD,IAAW;MAClBK,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAAoBC,MAApB;MACA,OAAO,CACL,GAAGJ,KADE,EAEL;QACEO,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,EADN;QAEEP,MAFF;QAGEC;MAHF,CAFK,CAAP;IAQD,CAVO,CAAR;EAWD,CAZ0B,EAYxB,EAZwB,CAA3B;EAcA,MAAMO,aAAa,GAAGnB,WAAW,CAC9BoB,OAAD,IAAab,QAAQ,CAAEc,GAAD,IAASlB,gBAAgB,CAACiB,OAAD,EAAUC,GAAV,CAA1B,CADU,EAE/B,CAACd,QAAD,CAF+B,CAAjC;EAIA,MAAMe,aAAa,GAAGtB,WAAW,CAC9BoB,OAAD,IAAaX,QAAQ,CAAEc,GAAD,IAASrB,gBAAgB,CAACkB,OAAD,EAAUG,GAAV,CAA1B,CADU,EAE/B,CAACd,QAAD,CAF+B,CAAjC;EAMA,oBAAQ;IAAA,uBAAE,QAAC,SAAD;MAAW,KAAK,EAAEH,KAAlB;MAAyB,KAAK,EAAEE,KAAhC;MAAuC,SAAS,EAAEE,OAAlD;MAA2D,aAAa,EAAES,aAA1E;MAAyF,aAAa,EAAEG,aAAxG;MACR,OAAO;IADC;MAAA;MAAA;MAAA;IAAA;EAAF,iBAAR;AAED;;GAtDQjB,gB;;KAAAA,gB;AAwDT,eAAeA,gBAAf"},"metadata":{},"sourceType":"module"}