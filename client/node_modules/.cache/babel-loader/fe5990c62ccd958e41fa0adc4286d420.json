{"ast":null,"code":"var _jsxFileName = \"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/src/js/Pages/RunTime.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport nodeStructure from '../../nodesStructure.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass TreeNode {\n  constructor(info) {\n    this.label = info.data.label;\n    this.id = info.id;\n    this.name = info.name;\n    this.type = info.type;\n    this.children = [];\n  }\n\n}\n\nfor (let obj of nodeStructure) {\n  // const currentNode = new TreeNode()\n  console.log(obj);\n}\n\nexport default function RunTime() {\n  _s();\n\n  console.log(nodeStructure);\n  const [currentStage, setCurrentStage] = useState(nodeStructure[0]); // const nodes = JSON.parse(nodeStructure)\n\n  useEffect(() => {\n    return () => {\n      setCurrentStage(prevStage => {\n        console.log(prevStage);\n\n        if (prevStage.type == \"startNode\" || prevStage.type == \"botNode\") {\n          for (let obj of nodeStructure) {\n            console.log(obj);\n          }\n        }\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" This is runtime page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), currentStage.text]\n  }, void 0, true);\n}\n\n_s(RunTime, \"BCtBj7xO/Fvi2GHljF81XhQbAqk=\");\n\n_c = RunTime;\n\nvar _c;\n\n$RefreshReg$(_c, \"RunTime\");","map":{"version":3,"names":["React","useState","useEffect","nodeStructure","TreeNode","constructor","info","label","data","id","name","type","children","obj","console","log","RunTime","currentStage","setCurrentStage","prevStage","text"],"sources":["/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/src/js/Pages/RunTime.js"],"sourcesContent":["import React,{useState,useEffect} from 'react';\nimport nodeStructure from '../../nodesStructure.json';\n\nclass TreeNode {\n  constructor(info) {\n    this.label = info.data.label;\n    this.id = info.id;\n    this.name = info.name;\n    this.type =  info.type;\n    this.children = [];\n  }\n}\nfor(let obj of nodeStructure)\n{\n  // const currentNode = new TreeNode()\n  console.log(obj)\n}\n\nexport default function RunTime() {\n  console.log(nodeStructure)\n  const [currentStage, setCurrentStage] = useState(nodeStructure[0])\n  // const nodes = JSON.parse(nodeStructure)\n  useEffect(() => {\n    return () => {\n      setCurrentStage(prevStage => {\n        console.log(prevStage)\n        if(prevStage.type == \"startNode\" || prevStage.type == \"botNode\")\n        { \n          for(let obj of nodeStructure)\n          {\n            console.log(obj)\n          } \n        }\n      })\n    };\n  }, [])\n  return (\n    <>\n        <h1> This is runtime page</h1>\n        {currentStage.text}\n    </>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,aAAP,MAA0B,2BAA1B;;;;AAEA,MAAMC,QAAN,CAAe;EACbC,WAAW,CAACC,IAAD,EAAO;IAChB,KAAKC,KAAL,GAAaD,IAAI,CAACE,IAAL,CAAUD,KAAvB;IACA,KAAKE,EAAL,GAAUH,IAAI,CAACG,EAAf;IACA,KAAKC,IAAL,GAAYJ,IAAI,CAACI,IAAjB;IACA,KAAKC,IAAL,GAAaL,IAAI,CAACK,IAAlB;IACA,KAAKC,QAAL,GAAgB,EAAhB;EACD;;AAPY;;AASf,KAAI,IAAIC,GAAR,IAAeV,aAAf,EACA;EACE;EACAW,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAED,eAAe,SAASG,OAAT,GAAmB;EAAA;;EAChCF,OAAO,CAACC,GAAR,CAAYZ,aAAZ;EACA,MAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAACE,aAAa,CAAC,CAAD,CAAd,CAAhD,CAFgC,CAGhC;;EACAD,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXgB,eAAe,CAACC,SAAS,IAAI;QAC3BL,OAAO,CAACC,GAAR,CAAYI,SAAZ;;QACA,IAAGA,SAAS,CAACR,IAAV,IAAkB,WAAlB,IAAiCQ,SAAS,CAACR,IAAV,IAAkB,SAAtD,EACA;UACE,KAAI,IAAIE,GAAR,IAAeV,aAAf,EACA;YACEW,OAAO,CAACC,GAAR,CAAYF,GAAZ;UACD;QACF;MACF,CATc,CAAf;IAUD,CAXD;EAYD,CAbQ,EAaN,EAbM,CAAT;EAcA,oBACE;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAEKI,YAAY,CAACG,IAFlB;EAAA,gBADF;AAMD;;GAxBuBJ,O;;KAAAA,O"},"metadata":{},"sourceType":"module"}