[{"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/index.js":"1","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/App.js":"2","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Pages/Designer.js":"3","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Pages/RunTime.js":"4","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Pages/Homepage.js":"5","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/ButtonResponseComponent.js":"6","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/DrawingContainer.js":"7","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/StartComponent.js":"8","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/BotComponent.js":"9","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/Drawer.js":"10","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/YesNoComponent.js":"11","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/EndComponent.js":"12","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/UserTextComponent.js":"13","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/ChatBubbleComponent.js":"14","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/YesNoRunTime.js":"15","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/UserButtonRunTime.js":"16","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/UserTextRunTime.js":"17","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/UserRunTimeWrapper.js":"18","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/BotRunTime.js":"19","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Pages/Embed.js":"20"},{"size":541,"mtime":1654044578355,"results":"21","hashOfConfig":"22"},{"size":928,"mtime":1657625920003,"results":"23","hashOfConfig":"22"},{"size":8390,"mtime":1658187553895,"results":"24","hashOfConfig":"22"},{"size":4712,"mtime":1659637573617,"results":"25","hashOfConfig":"22"},{"size":3877,"mtime":1657625948620,"results":"26","hashOfConfig":"22"},{"size":4906,"mtime":1656430751941,"results":"27","hashOfConfig":"22"},{"size":1468,"mtime":1656430716722,"results":"28","hashOfConfig":"22"},{"size":776,"mtime":1656430766040,"results":"29","hashOfConfig":"22"},{"size":2727,"mtime":1656430748449,"results":"30","hashOfConfig":"22"},{"size":5078,"mtime":1656430759723,"results":"31","hashOfConfig":"22"},{"size":2487,"mtime":1656430770157,"results":"32","hashOfConfig":"22"},{"size":422,"mtime":1656430763842,"results":"33","hashOfConfig":"22"},{"size":6229,"mtime":1658071196138,"results":"34","hashOfConfig":"22"},{"size":2000,"mtime":1657623613209,"results":"35","hashOfConfig":"22"},{"size":692,"mtime":1657626627015,"results":"36","hashOfConfig":"22"},{"size":673,"mtime":1657626523539,"results":"37","hashOfConfig":"22"},{"size":1802,"mtime":1658185596601,"results":"38","hashOfConfig":"22"},{"size":960,"mtime":1658186638034,"results":"39","hashOfConfig":"22"},{"size":755,"mtime":1658186546359,"results":"40","hashOfConfig":"22"},{"size":5402,"mtime":1657627200212,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"1p622o2",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"45"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"45"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"61"},"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/index.js",[],[],[],"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/App.js",["119","120"],[],"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Pages/Designer.js",["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],[],"import React, { useCallback } from \"react\";\nimport DrawerComponent from \"../Components/DesignerComponents/Drawer\";\nimport BotComponent from \"../Components/DesignerComponents/BotComponent\";\nimport DrawingComponent from \"../Components/DesignerComponents/DrawingContainer\";\nimport YesNoComponent from \"../Components/DesignerComponents/YesNoComponent\";\nimport ButtonResponseComponent from \"../Components/DesignerComponents/ButtonResponseComponent\";\nimport UserTextComponent from \"../Components/DesignerComponents/UserTextComponent\";\nimport StartComponent from \"../Components/DesignerComponents/StartComponent\";\nimport { addEdge, useNodesState, useEdgesState } from \"react-flow-renderer\";\nimport EndComponent from \"../Components/DesignerComponents/EndComponent\";\n\nconst nodeTypes = {\n  yesNoNode: YesNoComponent,\n  buttonNode: ButtonResponseComponent,\n  botNode: BotComponent,\n  userText: UserTextComponent,\n  startNode: StartComponent,\n  endNode: EndComponent,\n};\n\nexport default function DesignTime() {\n  const validateConnection = (connection) => {\n    console.log(\"validation callback at app.js\");\n    if (\n      (connection.source.indexOf(\"Start\") > -1 &&\n        connection.target.indexOf(\"User\") > -1) ||\n      (connection.source.indexOf(\"User\") > -1 &&\n        connection.target.indexOf(\"User\") > -1)\n    )\n      return false;\n    return true;\n  };\n\n  const updateTextInState = (responseType, node_id, text) => {\n    setNodes((currentNodes) => {\n      console.log(\"currentNodes:\" + currentNodes);\n      let updatedNode = {};\n      let filteredNodes = currentNodes.filter((node) => {\n        return node.id !== node_id;\n      });\n      for (let node of currentNodes) {\n        if (node.id == node_id) {\n          updatedNode = node;\n        }\n      }\n\n      return [...filteredNodes, { ...updatedNode, text }];\n    });\n  };\n  const initialNodes = [\n    {\n      id: \"Start\",\n      type: \"startNode\", // input node\n      name: \"startNode\",\n      data: { label: \"Start Node\", validationCallback: validateConnection },\n      position: { x: 100, y: 0 },\n      children: [],\n      parent: null,\n    },\n  ];\n\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n\n  const saveFlow = () => {\n    const nodesData = JSON.stringify(nodes);\n    const blobNodes = new Blob([nodesData], { type: \"text/plain\" });\n    const linkNodes = document.createElement(\"a\");\n    const urlNodes = URL.createObjectURL(blobNodes);\n    linkNodes.download = \"nodesStructure.json\";\n    linkNodes.href = urlNodes;\n    linkNodes.click();\n\n    // const edgesData = JSON.stringify(edges);\n    // const blobEdges = new Blob([edgesData], {type: \"text/plain\"});\n    // const urlEdges = URL.createObjectURL(blobEdges);\n    // const linkEdges = document.createElement('a');\n    // linkEdges.download = 'edgesStructure.json';\n    // linkEdges.href = urlEdges;\n    // linkEdges.click();\n  };\n\n  const onConnect = useCallback((params) => {\n    console.log(\"OnConnect Called!!!\");\n    setEdges((edges) => {\n      console.log({ ...params });\n      return [\n        ...edges,\n        {\n          ...params,\n          id: Math.random().toString(),\n          // source,\n          // target,\n          // sourceHandle,\n          // targetHandle\n        },\n      ];\n    });\n\n    //update Children of source\n    setNodes((currentNodes) => {\n      console.log(\"currentNodes:\" + currentNodes);\n      let parentNode = {},\n        childNode = {};\n      let filteredNodes = currentNodes.filter((node) => {\n        return node.id !== params.source && node.id !== params.target;\n      });\n      for (let node of currentNodes) {\n        if (node.id == params.source) {\n          parentNode = node;\n        } else if (node.id == params.target) {\n          childNode = node;\n        }\n      }\n      let nodeChildren = parentNode.children;\n      if (params.target.indexOf(\"end\") == -1) {\n        nodeChildren = [\n          ...nodeChildren,\n          { [params.sourceHandle]: params.target },\n        ];\n      }\n      // nodeChildren.push({[params.sourceHandle]:params.target})\n\n      return [\n        ...filteredNodes,\n        { ...parentNode, children: nodeChildren },\n        { ...childNode, parent: params.source },\n      ];\n    });\n  }, []);\n\n  const clickEvent = (event, responseType) => {\n    if (responseType == \"save\") {\n      saveFlow();\n      return;\n    }\n    setNodes((currentNodes) => {\n      console.log(currentNodes);\n      const node_id = Math.random();\n      switch (responseType) {\n        case \"Bot\":\n          {\n            return [\n              ...currentNodes,\n              {\n                id: \"Bot-\" + node_id,\n                position: { x: 100, y: 100 },\n                type: \"botNode\",\n                text: \"\",\n                children: [],\n                parent: \"\",\n                // data:{label: (\n                //       <>\n                //       {/* <BotComponent /> */}\n                //       <YesNoComponent />\n                //       </>\n                //   )},\n                style: {\n                  background: \"#D6D5E6\",\n                  width: 200,\n                },\n                data: {\n                  validationCallback: validateConnection,\n                  node_id,\n                  updateTextInState,\n                },\n              },\n            ];\n          }\n          break;\n        case \"YesNo\":\n          {\n            return [\n              ...currentNodes,\n              {\n                id: \"User-\" + node_id,\n                position: { x: 100, y: 100 },\n                type: \"yesNoNode\",\n                children: [],\n                parent: \"\",\n                style: {\n                  background: \"#D6D5E6\",\n                  width: 200,\n                },\n                data: {\n                  validationCallback: validateConnection,\n                  node_id,\n                },\n              },\n            ];\n          }\n          break;\n        case \"button\":\n          {\n            return [\n              ...currentNodes,\n              {\n                id: \"User-\" + node_id,\n                position: { x: 100, y: 100 },\n                type: \"buttonNode\",\n                text: [],\n                children: [],\n                parent: \"\",\n                style: {\n                  background: \"#D6D5E6\",\n                  width: 200,\n                },\n                data: {\n                  validationCallback: validateConnection,\n                  node_id,\n                  updateTextInState,\n                },\n              },\n            ];\n          }\n          break;\n        case \"UserText\":\n          {\n            return [\n              ...currentNodes,\n              {\n                id: \"User-\" + node_id,\n                position: { x: 100, y: 100 },\n                type: \"userText\",\n                children: [],\n                parent: \"\",\n                style: {\n                  background: \"#D6D5E6\",\n                  width: 200,\n                },\n                text: [],\n                isNLP: true,\n                name: \"userText\",\n                data: {\n                  validationCallback: validateConnection,\n                  node_id,\n                  updateTextInState,\n                },\n              },\n            ];\n          }\n          break;\n        case \"end\":\n          {\n            return [\n              ...currentNodes,\n              {\n                id: \"end_\" + node_id,\n                position: { x: 100, y: 100 },\n                type: \"endNode\",\n                name: \"end\",\n                children: null,\n                parent: \"\",\n                data: {\n                  validationCallback: validateConnection,\n                  node_id,\n                },\n              },\n            ];\n          }\n          break;\n      }\n    });\n  };\n  return (\n    <div className=\"app-body\" style={{ display: \"flex\" }}>\n      <DrawerComponent clickEvent={clickEvent} />\n      <div\n        className=\"drawing-space\"\n        style={{ height: \"100vh\", width: \"100vw\" }}\n      >\n        <DrawingComponent\n          nodes={nodes}\n          setNodes={setNodes}\n          edges={edges}\n          setEdges={setEdges}\n          onConnect={onConnect}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          nodeTypes={nodeTypes}\n        />\n      </div>\n      <br />\n    </div>\n  );\n}\n","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Pages/RunTime.js",["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157"],[],"import React, { useState, useEffect } from \"react\";\nimport nodeStructure from \"../../nodesStructureTrinity.json\";\n// import nodeStructure from \"../../nodesStructureLong.json\";\nimport ChatBubbleComponent from \"../Components/RuntimeComponents/ChatBubbleComponent\";\nimport ChatBackground from \"../../img/chat_background.jpg\";\nimport axios from \"axios\";\n\nexport default function RunTime() {\n  const [executedStages, setExecutedStages] = useState([nodeStructure[0]]);\n  const handleFlow = (event, textValue = \"\", nlpID = null) => {\n    console.log(\"Handle Flow called!!!\");\n    setExecutedStages((prevStage) => {\n      let newStage = prevStage;\n      if (\n        prevStage[prevStage.length - 1].type == \"startNode\" ||\n        prevStage[prevStage.length - 1].type == \"botNode\"\n      ) {\n        for (let obj of nodeStructure) {\n          if (\n            prevStage[prevStage.length - 1].children.length &&\n            Object.values(prevStage[prevStage.length - 1].children[0])[0] ==\n              obj.id &&\n            prevStage[prevStage.length - 1] != obj\n          )\n            newStage = [...prevStage, obj];\n        }\n      } else if (prevStage[prevStage.length - 1].type == \"yesNoNode\") {\n        if (event && event.target.parentElement.id === \"0\") {\n          for (let obj of nodeStructure) {\n            if (\n              prevStage[prevStage.length - 1].children.length &&\n              Object.values(prevStage[prevStage.length - 1].children[0])[0] ==\n                obj.id &&\n              prevStage[prevStage.length - 1] != obj\n            )\n              newStage = [...prevStage, obj];\n          }\n        } else if (event && event.target.parentElement.id === \"1\") {\n          for (let obj of nodeStructure) {\n            if (\n              prevStage[prevStage.length - 1].children.length &&\n              Object.values(prevStage[prevStage.length - 1].children[1])[0] ==\n                obj.id &&\n              prevStage[prevStage.length - 1] != obj\n            )\n              newStage = [...prevStage, obj];\n          }\n        }\n      } else if (event && prevStage[prevStage.length - 1].type == \"userText\") {\n        let correctIndex = null;\n        if (nlpID == \"No Match\") {\n          newStage = [\n            ...prevStage,\n            prevStage[prevStage.length - 2],\n            prevStage[prevStage.length - 1],\n          ];\n        } else {\n          if (event && prevStage[prevStage.length - 1].isNLP) {\n            correctIndex = nlpID;\n          } else {\n            for (let index in prevStage[prevStage.length - 1].text) {\n              if (prevStage[prevStage.length - 1].text[index] == textValue)\n                correctIndex = index;\n            }\n          }\n          for (let obj of nodeStructure) {\n            if (\n              correctIndex !== null &&\n              prevStage[prevStage.length - 1].children.length &&\n              Object.values(\n                prevStage[prevStage.length - 1].children[correctIndex]\n              )[0] == obj.id &&\n              prevStage[prevStage.length - 1] != obj\n            ) {\n              newStage = [...prevStage, obj];\n            }\n          }\n        }\n      } else if (\n        event &&\n        prevStage[prevStage.length - 1].type == \"buttonNode\"\n      ) {\n        console.log(\"Button Clicked!!\");\n        let correctIndex = null;\n        for (let index in prevStage[prevStage.length - 1].text) {\n          if (\n            prevStage[prevStage.length - 1].text[index] ==\n            event.target.textContent\n          )\n            correctIndex = index;\n        }\n        for (let obj of nodeStructure) {\n          if (\n            correctIndex &&\n            prevStage[prevStage.length - 1].children.length &&\n            Object.values(\n              prevStage[prevStage.length - 1].children[correctIndex]\n            )[0] == obj.id &&\n            prevStage[prevStage.length - 1] != obj\n          ) {\n            newStage = [...prevStage, obj];\n          }\n        }\n      }\n      return newStage;\n    });\n  };\n\n  useEffect(\n    () => {\n      // handleFlow();\n      // return () => {\n      // };\n    } /*, []*/ // Auto render on update to print next Bot Component\n  );\n  return (\n    <div\n      className=\"runtime-container\"\n      style={{\n        backgroundImage: `url(${ChatBackground})`,\n        backgroundRepeat: \"repeat\",\n        width: \"100vw\",\n        height: \"100vh\",\n        position: \"fixed\",\n        overflow: \"scroll\",\n      }}\n    >\n      {executedStages.map((currentStage, index) => {\n        console.log(\"Above\");\n        return (\n          <ChatBubbleComponent\n            key={index}\n            currentStage={currentStage}\n            handleFlow={handleFlow}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Pages/Homepage.js",["158","159"],[],"// import React from 'react';\n\n// export default function Homepage() {\n//   return (\n//     <>\n//         <Link to = '/design'><Button>DESIGN</Button></Link>\n//         <Link to = '/interact'><Button>INTERACT</Button></Link>\n//     </>\n//   );\n// }\n\nimport * as React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport ButtonBase from \"@mui/material/ButtonBase\";\nimport Typography from \"@mui/material/Typography\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"@mui/material\";\nimport { red } from \"@mui/material/colors\";\n\nconst images = [\n  {\n    url: \"./img/design.jpeg\",\n    pathTo: \"/design\",\n    title: \"Design\",\n    width: \"25%\",\n  },\n  {\n    url: \"./img/interact.png\",\n    pathTo: \"/interact\",\n    title: \"Interact\",\n    width: \"25%\",\n  },\n  {\n    url: \"./img/embed.png\",\n    pathTo: \"/embed\",\n    title: \"Embed\",\n    width: \"25%\",\n  },\n];\n\nconst ImageButton = styled(ButtonBase)(({ theme }) => ({\n  position: \"relative\",\n  height: 200,\n  //   borderRadius:20,\n  border: \"2px solid red\",\n  borderRadius: 15,\n  [theme.breakpoints.down(\"sm\")]: {\n    width: \"100% !important\", // Overrides inline-style\n    height: 100,\n  },\n  \"&:hover, &.Mui-focusVisible\": {\n    zIndex: 1,\n    \"& .MuiImageBackdrop-root\": {\n      opacity: 0.15,\n    },\n    \"& .MuiImageMarked-root\": {\n      opacity: 0,\n    },\n    \"& .MuiTypography-root\": {\n      border: \"4px solid currentColor\",\n    },\n  },\n}));\n\nconst ImageSrc = styled(\"span\")({\n  position: \"absolute\",\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n  backgroundSize: \"cover\",\n  backgroundPosition: \"center 40%\",\n  borderRadius: 15,\n});\n\nconst Image = styled(\"span\")(({ theme }) => ({\n  position: \"absolute\",\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  color: \"red\",\n  borderRadius: 15,\n}));\n\nconst ImageBackdrop = styled(\"span\")(({ theme }) => ({\n  position: \"absolute\",\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n  backgroundColor: theme.palette.common.black,\n  opacity: 0.4,\n  transition: theme.transitions.create(\"opacity\"),\n  borderRadius: 10,\n}));\n\nconst ImageMarked = styled(\"span\")(({ theme }) => ({\n  height: 3,\n  width: 18,\n  backgroundColor: \"red\", //theme.palette.common.white,\n  position: \"absolute\",\n  bottom: -2,\n  left: \"calc(50% - 9px)\",\n  transition: theme.transitions.create(\"opacity\"),\n}));\n\nexport default function Homepage() {\n  return (\n    <div\n      className=\"container-class\"\n      style={{ height: \"100vh\", backgroundColor: \"black\" }}\n    >\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          minWidth: 300,\n          width: \"100%\",\n          justifyContent: \"space-evenly\",\n          top: \"30%\",\n          position: \"absolute\",\n        }}\n      >\n        {images.map((image) => (\n          <ImageButton\n            focusRipple\n            key={image.title}\n            style={{\n              width: image.width,\n            }}\n          >\n            <Link to={image.pathTo}>\n              <ImageSrc style={{ backgroundImage: `url(${image.url})` }} />\n              <ImageBackdrop className=\"MuiImageBackdrop-root\" />\n              <Image>\n                <Typography\n                  component=\"span\"\n                  variant=\"subtitle1\"\n                  color=\"inherit\"\n                  sx={{\n                    position: \"relative\",\n                    p: 4,\n                    pt: 2,\n                    pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\n                    fontWeight: \"bold\",\n                    fontSize: \"20px\",\n                  }}\n                >\n                  {image.title}\n                  <ImageMarked className=\"MuiImageMarked-root\" />\n                </Typography>\n              </Image>\n            </Link>\n          </ImageButton>\n        ))}\n      </Box>\n    </div>\n  );\n}\n",[],"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/ButtonResponseComponent.js",["160"],[],"import React, { useState, useRef } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport { Button, CardActionArea, CardActions } from \"@mui/material\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport { Handle, Position } from \"react-flow-renderer\";\nimport TextField from \"@mui/material/TextField\";\nconst handleStyle = { left: 10 };\n\nexport default function ButtonResponseComponent(key) {\n  const [buttons, setButtons] = useState([]);\n  const [buttonCount, setButtonCount] = useState(0);\n  const cardRef = useRef(null);\n  const [isSaved, setIsSaved] = useState(true);\n\n  const handleCountChange = (event, number) => {\n    console.log(\"Count changed!!\", buttonCount);\n    setButtonCount(parseInt(event.target.value));\n  };\n\n  const handleTextChange = (event, index) => {\n    console.log(\"Value changed for!!\", index);\n    var existingButtons = [...buttons];\n    existingButtons[index] = event.target.value;\n    setButtons(existingButtons);\n  };\n\n  return (\n    <>\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        id={\"user-target-handle-\" + key.data.node_id}\n        isValidConnection={key.data.validationCallback}\n      />\n      <Card sx={{ maxWidth: \"90vw\" }} key={key} ref={cardRef}>\n        <CardActionArea>\n          <CardContent sx={{ padding: \"8px 15px\" }}>\n            <AppBar\n              position=\"static\"\n              color=\"secondary\"\n              sx={{ marginBottom: \"6px\", borderRadius: \"10px\" }}\n            >\n              <Toolbar\n                variant=\"dense\"\n                sx={{ minHeight: \"5%\", justifyContent: \"center\" }}\n              >\n                <Typography\n                  variant=\"subtitle1\"\n                  color=\"black\"\n                  component=\"div\"\n                  sx={{ lineHeight: \"15px\", fontSize: \"0.75rem\" }}\n                >\n                  User Response\n                </Typography>\n              </Toolbar>\n            </AppBar>\n\n            {/* <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        value={buttonCount}\n                        label=\"Button Count\"\n                        // data-cy=\"select\"\n                        onChange={(event) => {\n                            console.log('Value Changed')\n                        }}\n                    >\n                        <option value={1}>1</option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                    </Select> */}\n            <label>\n              Button Count&nbsp;\n              <select\n                id=\"demo-simple-select\"\n                value={buttonCount}\n                label=\"Button Count\"\n                // data-cy=\"select\"\n                onChange={handleCountChange}\n              >\n                <option value={0}>0</option>\n                <option value={1}>1</option>\n                <option value={2}>2</option>\n                <option value={3}>3</option>\n                <option value={4}>4</option>\n              </select>\n            </label>\n            <br />\n            <br />\n            {[...Array(parseInt(buttonCount))].map((value, index) => (\n              <TextField\n                id=\"outlined-basic\"\n                label={\"Button \" + (index + 1)}\n                required\n                onChange={(event) => {\n                  handleTextChange(event, index);\n                  setIsSaved(false);\n                }}\n                variant=\"outlined\"\n                sx={{ margin: \"10px\" }}\n              />\n            ))}\n          </CardContent>\n        </CardActionArea>\n        <CardActions\n          sx={{ padding: 0, display: \"flex\", justifyContent: \"space-between\" }}\n        >\n          <Button\n            onClick={() => {\n              key.data.updateTextInState(\n                key.type,\n                \"User-\" + key.data.node_id,\n                buttons\n              );\n              setIsSaved(true);\n            }}\n            size=\"small\"\n          >\n            Save\n          </Button>\n          {isSaved ? (\n            <></>\n          ) : (\n            <span style={{ fontSize: 8, fontStyle: \"italic\", marginRight: 8 }}>\n              Please Save\n            </span>\n          )}\n        </CardActions>\n      </Card>\n      {[...Array(parseInt(buttonCount))].map((value, index) => (\n        <Handle\n          type=\"source\"\n          position={Position.Bottom}\n          id={index.toString()}\n          /*id={\"user-source-handle-\"+key.data.node_id+'-'+index}*/ style={{\n            left:\n              (cardRef.current.offsetWidth / (buttonCount + 1)) * (index + 1),\n          }}\n          isValidConnection={key.data.validationCallback}\n        />\n      ))}\n    </>\n  );\n}\n","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/DrawingContainer.js",["161","162"],[],"import { useState, useRef, useCallback } from 'react';\nimport ReactFlow,  { applyEdgeChanges, applyNodeChanges } from 'react-flow-renderer';\n\n\nfunction DrawingContainer({nodes,setNodes, edges, setEdges, onConnect, nodeTypes}) {\n//   const [nodes, setNodes] = useState(initialNodes);\n//   const [edges, setEdges] = useState([]);\n//   const yPos = useRef(0);\n\n//   const addNode = useCallback(() => {\n//     yPos.current += 50;\n//     setNodes((currentNodes) => {\n//       console.log(currentNodes);\n//       return [\n//         ...currentNodes,\n//         {\n//           id: Math.random().toString(),\n//           position: { x: 100, y: yPos.current },\n//           data:{label: (\n//                 <>\n//                 <BotComponent />\n//                 </>\n//             )},\n//             style: {\n//                 background: '#D6D5E6',\n//                 width: 200,\n//             }\n//         }\n//       ];\n//     });\n//   }, []);\n\n\n  const onNodesChange = useCallback(\n    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    [setNodes]\n  );\n  const onEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    [setEdges]\n  );\n\n  return (<>\n    <ReactFlow \n      nodes={nodes} \n      edges={edges} \n      onConnect={onConnect} \n      onNodesChange={onNodesChange} \n      onEdgesChange={onEdgesChange} \n      nodeTypes = {nodeTypes}\n      fitView \n    />\n    </>);\n}\n\nexport default DrawingContainer;\n","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/StartComponent.js",["163","164","165","166","167","168","169","170","171"],[],"import React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport { CardActionArea, CardActions } from \"@mui/material\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Stack from \"@mui/material/Stack\";\nimport { Handle, Position } from \"react-flow-renderer\";\nconst handleStyle = { left: 10 };\nexport default function StartComponent(key) {\n  return (\n    <>\n      <Chip label=\"Start Node\" variant=\"outlined\" />\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id=\"start\"\n        isValidConnection={key.data.validationCallback}\n      />\n    </>\n  );\n}\n","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/BotComponent.js",["172","173"],[],"import React, { useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport { Button, CardActionArea, CardActions } from \"@mui/material\";\nimport AppBar from \"@mui/material/AppBar\";\n// import Box from '@mui/material/Box';\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport { Handle, Position } from \"react-flow-renderer\";\nimport { fontSize } from \"@mui/material/node_modules/@mui/system\";\n\nexport default function BotComponent(key) {\n  const [textValue, setTextValue] = useState(\"\");\n  const [isSaved, setIsSaved] = useState(true);\n\n  const handleChange = (event) => {\n    setTextValue(event.target.value);\n    setIsSaved(false);\n  };\n\n  return (\n    <>\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        id={\"bot-target-handle-\" + key.data.node_id}\n      />\n      <Card sx={{ maxWidth: \"90vw\" }} key={key}>\n        <CardContent sx={{ padding: \"8px 15px\" }}>\n          <AppBar\n            position=\"static\"\n            sx={{ marginBottom: \"6px\", borderRadius: \"10px\" }}\n          >\n            <Toolbar\n              variant=\"dense\"\n              sx={{ minHeight: \"5%\", justifyContent: \"center\" }}\n            >\n              <Typography\n                variant=\"subtitle1\"\n                color=\"black\"\n                component=\"div\"\n                sx={{ lineHeight: \"15px\", fontSize: \"0.75rem\" }}\n              >\n                Bot Response\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <TextField\n            id=\"outlined-multiline-flexible\"\n            label=\"Enter Response\"\n            multiline\n            fullWidth\n            maxRows={4}\n            size=\"Small\"\n            value={textValue}\n            onChange={handleChange}\n          />\n        </CardContent>\n        <CardActions\n          sx={{ padding: 0, display: \"flex\", justifyContent: \"space-between\" }}\n        >\n          <Button\n            onClick={() => {\n              key.data.updateTextInState(\n                key.type,\n                \"Bot-\" + key.data.node_id,\n                textValue\n              );\n              setIsSaved(true);\n            }}\n            size=\"small\"\n          >\n            Save\n          </Button>\n          {isSaved ? (\n            <></>\n          ) : (\n            <span style={{ fontSize: 8, fontStyle: \"italic\", marginRight: 8 }}>\n              Please Save\n            </span>\n          )}\n        </CardActions>\n      </Card>\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id={\"0\"} /*id={\"bot-source-handle-\"+key.data.node_id}*/\n      />\n    </>\n  );\n}\n","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/Drawer.js",[],[],"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/YesNoComponent.js",["174","175"],[],"import React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport { CardActionArea, CardActions } from \"@mui/material\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Chip from \"@mui/material/Chip\";\nimport Stack from \"@mui/material/Stack\";\nimport { Handle, Position } from \"react-flow-renderer\";\nconst handleStyle = { left: 10 };\nexport default function YesNoComponent(key) {\n  return (\n    <>\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        id={\"user-target-handle-\" + key.data.node_id}\n        isValidConnection={key.data.validationCallback}\n      />\n      <Card sx={{ maxWidth: \"90vw\" }} key={key}>\n        <CardActionArea>\n          <CardContent sx={{ padding: \"8px 15px\" }}>\n            <AppBar\n              position=\"static\"\n              color=\"secondary\"\n              sx={{ marginBottom: \"6px\", borderRadius: \"10px\" }}\n            >\n              <Toolbar\n                variant=\"dense\"\n                sx={{ minHeight: \"5%\", justifyContent: \"center\" }}\n              >\n                <Typography\n                  variant=\"subtitle1\"\n                  color=\"black\"\n                  component=\"div\"\n                  sx={{ lineHeight: \"15px\", fontSize: \"0.75rem\" }}\n                >\n                  User Response\n                </Typography>\n              </Toolbar>\n            </AppBar>\n          </CardContent>\n        </CardActionArea>\n        <Stack\n          direction=\"row\"\n          justifyContent=\"space-evenly\"\n          alignItems=\"center\"\n          spacing={2}\n          sx={{ paddingBottom: 1 }}\n        >\n          <Chip label=\"Yes\" size=\"small\" sx={{ fontSize: 10 }} />\n          <Chip\n            label=\"No\"\n            size=\"small\"\n            variant=\"outlined\"\n            sx={{ fontSize: 10 }}\n          />\n        </Stack>\n      </Card>\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id={\"0\"}\n        /*id={\"user-source-handle-\"+key.data.node_id+'-1'}*/ style={{\n          left: 50,\n        }}\n        isValidConnection={key.data.validationCallback}\n      />\n      <Handle\n        type=\"source\"\n        position={Position.Bottom}\n        id={\"1\"}\n        /*id={\"user-source-handle-\"+key.data.node_id+'-2'}*/ style={{\n          left: 150,\n        }}\n        isValidConnection={key.data.validationCallback}\n      />\n    </>\n  );\n}\n","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/EndComponent.js",[],[],"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/DesignerComponents/UserTextComponent.js",["176","177","178"],[],"import React, { useState, useRef } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport { Button, CardActionArea, CardActions } from \"@mui/material\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport { Handle, Position } from \"react-flow-renderer\";\nimport TextField from \"@mui/material/TextField\";\nconst handleStyle = { left: 10 };\n\nexport default function UserTextComponent(key) {\n  const [fields, setFields] = useState([]);\n  const [fieldCount, setFieldCount] = useState(0);\n  const [isNLP, setIsNLP] = useState(false);\n  const [nlpType, setNLPType] = useState(0);\n  const [isSaved, setIsSaved] = useState(true);\n  const cardRef = useRef(null);\n\n  const handleCountChange = (event, number) => {\n    setFieldCount(parseInt(event.target.value));\n  };\n\n  const handleTextChange = (event, index) => {\n    console.log(\"Value changed for!!\", index);\n    var existingButtons = [...fields];\n    existingButtons[index] = event.target.value;\n    setFields(existingButtons);\n  };\n  const handleNLPChange = (event) => {\n    setIsNLP(event.target.value === \"true\");\n  };\n\n  const handleNLPTypeChange = (event) => {\n    setNLPType(parseInt(event.target.value));\n  };\n\n  return (\n    <>\n      <Handle\n        type=\"target\"\n        position={Position.Top}\n        id={\"user-target-handle-\" + key.data.node_id}\n        isValidConnection={key.data.validationCallback}\n      />\n      <Card sx={{ maxWidth: \"90vw\" }} key={key} ref={cardRef}>\n        <CardActionArea>\n          <CardContent sx={{ padding: \"8px 15px\" }}>\n            <AppBar\n              position=\"static\"\n              color=\"secondary\"\n              sx={{ marginBottom: \"6px\", borderRadius: \"10px\" }}\n            >\n              <Toolbar\n                variant=\"dense\"\n                sx={{ minHeight: \"5%\", justifyContent: \"center\" }}\n              >\n                <Typography\n                  variant=\"subtitle1\"\n                  color=\"black\"\n                  component=\"div\"\n                  sx={{ lineHeight: \"15px\", fontSize: \"0.75rem\" }}\n                >\n                  User Response\n                </Typography>\n              </Toolbar>\n            </AppBar>\n            {/* <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={buttonCount}\n                            label=\"Button Count\"\n                            // data-cy=\"select\"\n                            onChange={(event) => {\n                               console.log('Value Changed')\n                            }}\n                        >\n                            <option value={1}>1</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                        </Select> */}\n            <label>\n              Semantic Matching &nbsp;\n              <select\n                id=\"demo-simple-select\"\n                value={isNLP}\n                label=\"Total Fields\"\n                // data-cy=\"select\"\n                onChange={handleNLPChange}\n              >\n                <option value={true}>Enabled</option>\n                <option value={false}>Disabled</option>\n              </select>\n            </label>\n            <br />\n            <br />\n            {/* {isNLP && (\n              <>\n                <label>\n                  NLP Type &nbsp;\n                  <select\n                    id=\"demo-simple-select\"\n                    value={nlpType}\n                    label=\"Total Fields\"\n                    // data-cy=\"select\"\n                    onChange={handleNLPTypeChange}\n                  >\n                    <option value={1}>Semantic Matching</option>\n                    <option value={0}>Content Extraction</option>\n                  </select>\n                </label>\n                <br />\n                <br />\n              </>\n            )} */}\n            <label>\n              Total Fields &nbsp;\n              <select\n                id=\"demo-simple-select\"\n                value={fieldCount}\n                label=\"Total Fields\"\n                // data-cy=\"select\"\n                onChange={handleCountChange}\n              >\n                <option value={0}>0</option>\n                <option value={1}>1</option>\n                <option value={2}>2</option>\n                <option value={3}>3</option>\n                <option value={4}>4</option>\n              </select>\n            </label>\n            {[...Array(parseInt(fieldCount))].map((value, index) => (\n              <TextField\n                id=\"outlined-basic\"\n                label={\"Field \" + (index + 1)}\n                required\n                onChange={(event) => {\n                  handleTextChange(event, index);\n                  setIsSaved(false);\n                }}\n                variant=\"outlined\"\n                sx={{ margin: \"10px\" }}\n              />\n            ))}\n          </CardContent>\n        </CardActionArea>\n        <CardActions\n          sx={{ padding: 0, display: \"flex\", justifyContent: \"space-between\" }}\n        >\n          <Button\n            onClick={() => {\n              key.data.updateTextInState(\n                key.type,\n                \"User-\" + key.data.node_id,\n                fields\n              );\n              setIsSaved(true);\n            }}\n            size=\"small\"\n          >\n            Save\n          </Button>\n          {isSaved ? (\n            <></>\n          ) : (\n            <span style={{ fontSize: 8, fontStyle: \"italic\", marginRight: 8 }}>\n              Please Save\n            </span>\n          )}\n        </CardActions>\n      </Card>\n      {[...Array(parseInt(fieldCount))].map((value, index) => (\n        <Handle\n          type=\"source\"\n          position={Position.Bottom}\n          id={index.toString()}\n          /*id={\"user-source-handle-\"+key.data.node_id+'-'+index}*/ style={{\n            left:\n              (cardRef.current.offsetWidth / (fieldCount + 1)) * (index + 1),\n          }}\n          isValidConnection={key.data.validationCallback}\n        />\n      ))}\n    </>\n  );\n}\n","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/ChatBubbleComponent.js",["179","180","181","182","183","184","185","186"],[],"import React, { useState } from \"react\";\nimport Chip from \"@mui/material/Chip\";\nimport Stack from \"@mui/material/Stack\";\nimport YesNoRunTime from \"./YesNoRunTime\";\nimport BotRunTime from \"./BotRunTime\";\nimport UserRunTimeWrapper from \"./UserRunTimeWrapper\";\nimport UserTextRunTime from \"./UserTextRunTime\";\nimport UserButtonRunTime from \"./UserButtonRunTime\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nimport Typing from \"../../../img/Typing3.gif\";\n\nexport default function ChatBubbleComponent(props) {\n  const [botTimeout, setbotTimeout] = useState(false);\n  console.log(\"Insinde Chat Bubble\");\n  if (props.currentStage.type == \"yesNoNode\") {\n    return (\n      <UserRunTimeWrapper\n        ChildComponent={<YesNoRunTime handleFlow={props.handleFlow} />}\n      />\n    );\n  } else if (props.currentStage.type == \"userText\") {\n    return (\n      <UserRunTimeWrapper\n        ChildComponent={\n          <UserTextRunTime\n            handleFlow={props.handleFlow}\n            currentStage={props.currentStage}\n          />\n        }\n      />\n    );\n  } else if (props.currentStage.type == \"buttonNode\") {\n    return (\n      <UserRunTimeWrapper\n        ChildComponent={\n          <UserButtonRunTime\n            handleFlow={props.handleFlow}\n            buttons={props.currentStage.text}\n          />\n        }\n      />\n    );\n  } else {\n    if (!botTimeout) {\n      setTimeout(function () {\n        // return <BotRunTime text={props.currentStage.text} />;\n        setbotTimeout(true);\n        props.handleFlow();\n      }, 1000);\n    }\n\n    if (botTimeout) return <BotRunTime text={props.currentStage.text} />;\n    else\n      return (\n        <img src={Typing} style={{ width: \"120px\", marginLeft: \"120px\" }} />\n        // <BotRunTime\n        //   text={\n        //     <img src={Typing} />\n        //     // <Box sx={{ display: \"flex\" }}>\n        //     //   <CircularProgress />\n        //     // </Box>\n        //   }\n        // />\n      );\n  }\n}\n","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/YesNoRunTime.js",[],[],"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/UserButtonRunTime.js",[],[],"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/UserTextRunTime.js",[],[],[],"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/UserRunTimeWrapper.js",["187","188"],[],"import * as React from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport { Stack } from \"@mui/material\";\n\nexport default function UserRunTimeWrapper(props) {\n  //   const handleClick = (event) => {\n  //     console.info('You clicked the Chip.');\n  //     console.log(event.target)\n  //   };\n\n  return (\n    <Stack\n      direction=\"row\"\n      spacing={1}\n      sx={{ justifyContent: \"flex-end\", padding: \"20px\" }}\n    >\n      <Paper\n        elevation={3}\n        sx={{\n          borderRadius: \"0px 35px 0px 35px;\",\n          // backgroundColor: \"#a7c0cf\",\n          backgroundColor: \"#808080\",\n          width: \"30%\",\n          margin: \"2%\",\n          padding: \"2%\",\n        }}\n      >\n        {props.ChildComponent}\n        {/* <Box p={1}>\n          <Typography variant=\"h5\">{props.ChildComponent}</Typography>\n        </Box> */}\n      </Paper>\n    </Stack>\n  );\n}\n",[],"/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Components/RuntimeComponents/BotRunTime.js",["189","190","191"],[],"import React, { useState, useEffect } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nexport default function BotRunTime(props) {\n  return (\n    <Paper\n      elevation={3}\n      sx={{\n        borderRadius: \"35px 0px 35px 0px\",\n        backgroundColor: \"#edc991\",\n        // width: \"60%\",\n        width: \"max-content\",\n        maxWidth: \"60%\",\n        margin: \"2%\",\n        padding: \"1% 5%\",\n      }}\n    >\n      <Box p={1}>\n        {/* <Typography variant=\"h5\">{props.text}</Typography> */}\n        <Typography sx={{ fontSize: \"1rem\" }}>{props.text}</Typography>\n      </Box>\n    </Paper>\n  );\n}\n","/Users/swagatdash/Documents/Assignments/Dissertation/bot-gen-z/client/src/js/Pages/Embed.js",["192","193"],[],"import React, { useCallback } from \"react\";\n\nexport default function Embed() {\n  return (\n    <>\n      <h1>This is a random webpage</h1>\n      <h2>The content here is random, but the chatbot is a relavant one</h2>\n      <article>\n        <h2>Google Chrome</h2>\n        <p>\n          Google Chrome is a web browser developed by Google, released in 2008.\n          Chrome is the world's most popular web browser today! Google Chrome is\n          a web browser developed by Google, released in 2008. Chrome is the\n          world's most popular web browser today! Google Chrome is a web browser\n          developed by Google, released in 2008. Chrome is the world's most\n          popular web browser today! Google Chrome is a web browser developed by\n          Google, released in 2008. Chrome is the world's most popular web\n          browser today! Google Chrome is a web browser developed by Google,\n          released in 2008. Chrome is the world's most popular web browser\n          today! Google Chrome is a web browser developed by Google, released in\n          2008. Chrome is the world's most popular web browser today! Google\n          Chrome is a web browser developed by Google, released in 2008. Chrome\n          is the world's most popular web browser today!\n        </p>\n      </article>\n\n      <article>\n        <h2>Mozilla Firefox</h2>\n        <p>\n          Mozilla Firefox is an open-source web browser developed by Mozilla.\n          Firefox has been the second most popular web browser since January,\n          2018. Mozilla Firefox is an open-source web browser developed by\n          Mozilla. Firefox has been the second most popular web browser since\n          January, 2018. Mozilla Firefox is an open-source web browser developed\n          by Mozilla. Firefox has been the second most popular web browser since\n          January, 2018. Mozilla Firefox is an open-source web browser developed\n          by Mozilla. Firefox has been the second most popular web browser since\n          January, 2018. Mozilla Firefox is an open-source web browser developed\n          by Mozilla. Firefox has been the second most popular web browser since\n          January, 2018. Mozilla Firefox is an open-source web browser developed\n          by Mozilla. Firefox has been the second most popular web browser since\n          January, 2018. Mozilla Firefox is an open-source web browser developed\n          by Mozilla. Firefox has been the second most popular web browser since\n          January, 2018. Mozilla Firefox is an open-source web browser developed\n          by Mozilla. Firefox has been the second most popular web browser since\n          January, 2018. Mozilla Firefox is an open-source web browser developed\n          by Mozilla. Firefox has been the second most popular web browser since\n          January, 2018. Mozilla Firefox is an open-source web browser developed\n          by Mozilla. Firefox has been the second most popular web browser since\n          January, 2018.\n        </p>\n      </article>\n\n      <article>\n        <h2>Microsoft Edge</h2>\n        <p style={{ width: \"50%\" }}>\n          Microsoft Edge is a web browser developed by Microsoft, released in\n          2015. Microsoft Edge replaced Internet Explorer. Microsoft Edge is a\n          web browser developed by Microsoft, released in 2015. Microsoft Edge\n          replaced Internet Explorer. Microsoft Edge is a web browser developed\n          by Microsoft, released in 2015. Microsoft Edge replaced Internet\n          Explorer. Microsoft Edge is a web browser developed by Microsoft,\n          released in 2015. Microsoft Edge replaced Internet Explorer. Microsoft\n          Edge is a web browser developed by Microsoft, released in 2015.\n          Microsoft Edge replaced Internet Explorer. Microsoft Edge is a web\n          browser developed by Microsoft, released in 2015. Microsoft Edge\n          replaced Internet Explorer. Microsoft Edge is a web browser developed\n          by Microsoft, released in 2015. Microsoft Edge replaced Internet\n          Explorer. Microsoft Edge is a web browser developed by Microsoft,\n          released in 2015. Microsoft Edge replaced Internet Explorer. Microsoft\n          Edge is a web browser developed by Microsoft, released in 2015.\n          Microsoft Edge replaced Internet Explorer. Microsoft Edge is a web\n          browser developed by Microsoft, released in 2015. Microsoft Edge\n          replaced Internet Explorer. Microsoft Edge is a web browser developed\n          by Microsoft, released in 2015. Microsoft Edge replaced Internet\n          Explorer. Microsoft Edge is a web browser developed by Microsoft,\n          released in 2015. Microsoft Edge replaced Internet Explorer. Microsoft\n          Edge is a web browser developed by Microsoft, released in 2015.\n          Microsoft Edge replaced Internet Explorer. Microsoft Edge is a web\n          browser developed by Microsoft, released in 2015. Microsoft Edge\n          replaced Internet Explorer.\n        </p>\n      </article>\n      <div className=\"embed-body\" style={{ display: \"flex\" }}>\n        <iframe\n          src=\"http://localhost:3000/interact\"\n          width=\"40%\"\n          height=\"400\"\n          style={{\n            border: \"4px solid black\",\n            position: \"fixed\",\n            bottom: \"10px\",\n            right: \"20px\",\n          }}\n        ></iframe>\n      </div>\n    </>\n  );\n}\n",{"ruleId":"194","severity":1,"message":"195","line":1,"column":8,"nodeType":"196","messageId":"197","endLine":1,"endColumn":12},{"ruleId":"194","severity":1,"message":"198","line":3,"column":42,"nodeType":"196","messageId":"197","endLine":3,"endColumn":46},{"ruleId":"194","severity":1,"message":"199","line":9,"column":10,"nodeType":"196","messageId":"197","endLine":9,"endColumn":17},{"ruleId":"200","severity":1,"message":"201","line":42,"column":21,"nodeType":"202","messageId":"203","endLine":42,"endColumn":23},{"ruleId":"200","severity":1,"message":"201","line":109,"column":21,"nodeType":"202","messageId":"203","endLine":109,"endColumn":23},{"ruleId":"200","severity":1,"message":"201","line":111,"column":28,"nodeType":"202","messageId":"203","endLine":111,"endColumn":30},{"ruleId":"200","severity":1,"message":"201","line":116,"column":40,"nodeType":"202","messageId":"203","endLine":116,"endColumn":42},{"ruleId":"204","severity":1,"message":"205","line":130,"column":6,"nodeType":"206","endLine":130,"endColumn":8,"suggestions":"207"},{"ruleId":"200","severity":1,"message":"201","line":133,"column":22,"nodeType":"202","messageId":"203","endLine":133,"endColumn":24},{"ruleId":"208","severity":1,"message":"209","line":140,"column":7,"nodeType":"210","messageId":"211","endLine":262,"endColumn":8},{"ruleId":"212","severity":1,"message":"213","line":142,"column":11,"nodeType":"214","messageId":"215","endLine":169,"endColumn":12},{"ruleId":"216","severity":1,"message":"217","line":170,"column":11,"nodeType":"218","messageId":"219","endLine":170,"endColumn":17},{"ruleId":"212","severity":1,"message":"213","line":172,"column":11,"nodeType":"214","messageId":"215","endLine":191,"endColumn":12},{"ruleId":"216","severity":1,"message":"217","line":192,"column":11,"nodeType":"218","messageId":"219","endLine":192,"endColumn":17},{"ruleId":"212","severity":1,"message":"213","line":194,"column":11,"nodeType":"214","messageId":"215","endLine":215,"endColumn":12},{"ruleId":"216","severity":1,"message":"217","line":216,"column":11,"nodeType":"218","messageId":"219","endLine":216,"endColumn":17},{"ruleId":"212","severity":1,"message":"213","line":218,"column":11,"nodeType":"214","messageId":"215","endLine":241,"endColumn":12},{"ruleId":"216","severity":1,"message":"217","line":242,"column":11,"nodeType":"218","messageId":"219","endLine":242,"endColumn":17},{"ruleId":"212","severity":1,"message":"213","line":244,"column":11,"nodeType":"214","messageId":"215","endLine":260,"endColumn":12},{"ruleId":"216","severity":1,"message":"217","line":261,"column":11,"nodeType":"218","messageId":"219","endLine":261,"endColumn":17},{"ruleId":"194","severity":1,"message":"220","line":6,"column":8,"nodeType":"196","messageId":"197","endLine":6,"endColumn":13},{"ruleId":"200","severity":1,"message":"201","line":15,"column":46,"nodeType":"202","messageId":"203","endLine":15,"endColumn":48},{"ruleId":"200","severity":1,"message":"201","line":16,"column":46,"nodeType":"202","messageId":"203","endLine":16,"endColumn":48},{"ruleId":"200","severity":1,"message":"201","line":21,"column":75,"nodeType":"202","messageId":"203","endLine":21,"endColumn":77},{"ruleId":"200","severity":1,"message":"221","line":23,"column":45,"nodeType":"202","messageId":"203","endLine":23,"endColumn":47},{"ruleId":"200","severity":1,"message":"201","line":27,"column":55,"nodeType":"202","messageId":"203","endLine":27,"endColumn":57},{"ruleId":"200","severity":1,"message":"201","line":32,"column":77,"nodeType":"202","messageId":"203","endLine":32,"endColumn":79},{"ruleId":"200","severity":1,"message":"221","line":34,"column":47,"nodeType":"202","messageId":"203","endLine":34,"endColumn":49},{"ruleId":"200","severity":1,"message":"201","line":42,"column":77,"nodeType":"202","messageId":"203","endLine":42,"endColumn":79},{"ruleId":"200","severity":1,"message":"221","line":44,"column":47,"nodeType":"202","messageId":"203","endLine":44,"endColumn":49},{"ruleId":"200","severity":1,"message":"201","line":49,"column":64,"nodeType":"202","messageId":"203","endLine":49,"endColumn":66},{"ruleId":"200","severity":1,"message":"201","line":51,"column":19,"nodeType":"202","messageId":"203","endLine":51,"endColumn":21},{"ruleId":"200","severity":1,"message":"201","line":62,"column":63,"nodeType":"202","messageId":"203","endLine":62,"endColumn":65},{"ruleId":"200","severity":1,"message":"201","line":72,"column":20,"nodeType":"202","messageId":"203","endLine":72,"endColumn":22},{"ruleId":"200","severity":1,"message":"221","line":73,"column":47,"nodeType":"202","messageId":"203","endLine":73,"endColumn":49},{"ruleId":"200","severity":1,"message":"201","line":81,"column":46,"nodeType":"202","messageId":"203","endLine":81,"endColumn":48},{"ruleId":"200","severity":1,"message":"201","line":87,"column":57,"nodeType":"202","messageId":"203","endLine":87,"endColumn":59},{"ruleId":"200","severity":1,"message":"201","line":98,"column":18,"nodeType":"202","messageId":"203","endLine":98,"endColumn":20},{"ruleId":"200","severity":1,"message":"221","line":99,"column":45,"nodeType":"202","messageId":"203","endLine":99,"endColumn":47},{"ruleId":"194","severity":1,"message":"222","line":18,"column":10,"nodeType":"196","messageId":"197","endLine":18,"endColumn":16},{"ruleId":"194","severity":1,"message":"223","line":19,"column":10,"nodeType":"196","messageId":"197","endLine":19,"endColumn":13},{"ruleId":"194","severity":1,"message":"224","line":10,"column":7,"nodeType":"196","messageId":"197","endLine":10,"endColumn":18},{"ruleId":"194","severity":1,"message":"225","line":1,"column":10,"nodeType":"196","messageId":"197","endLine":1,"endColumn":18},{"ruleId":"194","severity":1,"message":"226","line":1,"column":20,"nodeType":"196","messageId":"197","endLine":1,"endColumn":26},{"ruleId":"194","severity":1,"message":"227","line":2,"column":8,"nodeType":"196","messageId":"197","endLine":2,"endColumn":12},{"ruleId":"194","severity":1,"message":"228","line":3,"column":8,"nodeType":"196","messageId":"197","endLine":3,"endColumn":19},{"ruleId":"194","severity":1,"message":"229","line":4,"column":10,"nodeType":"196","messageId":"197","endLine":4,"endColumn":24},{"ruleId":"194","severity":1,"message":"230","line":4,"column":26,"nodeType":"196","messageId":"197","endLine":4,"endColumn":37},{"ruleId":"194","severity":1,"message":"231","line":5,"column":8,"nodeType":"196","messageId":"197","endLine":5,"endColumn":14},{"ruleId":"194","severity":1,"message":"232","line":6,"column":8,"nodeType":"196","messageId":"197","endLine":6,"endColumn":15},{"ruleId":"194","severity":1,"message":"233","line":7,"column":8,"nodeType":"196","messageId":"197","endLine":7,"endColumn":18},{"ruleId":"194","severity":1,"message":"234","line":9,"column":8,"nodeType":"196","messageId":"197","endLine":9,"endColumn":13},{"ruleId":"194","severity":1,"message":"224","line":11,"column":7,"nodeType":"196","messageId":"197","endLine":11,"endColumn":18},{"ruleId":"194","severity":1,"message":"229","line":5,"column":18,"nodeType":"196","messageId":"197","endLine":5,"endColumn":32},{"ruleId":"194","severity":1,"message":"235","line":11,"column":10,"nodeType":"196","messageId":"197","endLine":11,"endColumn":18},{"ruleId":"194","severity":1,"message":"230","line":4,"column":26,"nodeType":"196","messageId":"197","endLine":4,"endColumn":37},{"ruleId":"194","severity":1,"message":"224","line":11,"column":7,"nodeType":"196","messageId":"197","endLine":11,"endColumn":18},{"ruleId":"194","severity":1,"message":"224","line":10,"column":7,"nodeType":"196","messageId":"197","endLine":10,"endColumn":18},{"ruleId":"194","severity":1,"message":"236","line":16,"column":10,"nodeType":"196","messageId":"197","endLine":16,"endColumn":17},{"ruleId":"194","severity":1,"message":"237","line":34,"column":9,"nodeType":"196","messageId":"197","endLine":34,"endColumn":28},{"ruleId":"194","severity":1,"message":"238","line":2,"column":8,"nodeType":"196","messageId":"197","endLine":2,"endColumn":12},{"ruleId":"194","severity":1,"message":"234","line":3,"column":8,"nodeType":"196","messageId":"197","endLine":3,"endColumn":13},{"ruleId":"194","severity":1,"message":"239","line":9,"column":8,"nodeType":"196","messageId":"197","endLine":9,"endColumn":24},{"ruleId":"194","severity":1,"message":"240","line":10,"column":8,"nodeType":"196","messageId":"197","endLine":10,"endColumn":11},{"ruleId":"200","severity":1,"message":"201","line":16,"column":31,"nodeType":"202","messageId":"203","endLine":16,"endColumn":33},{"ruleId":"200","severity":1,"message":"201","line":22,"column":38,"nodeType":"202","messageId":"203","endLine":22,"endColumn":40},{"ruleId":"200","severity":1,"message":"201","line":33,"column":38,"nodeType":"202","messageId":"203","endLine":33,"endColumn":40},{"ruleId":"241","severity":1,"message":"242","line":56,"column":9,"nodeType":"243","endLine":56,"endColumn":77},{"ruleId":"194","severity":1,"message":"240","line":3,"column":8,"nodeType":"196","messageId":"197","endLine":3,"endColumn":11},{"ruleId":"194","severity":1,"message":"233","line":4,"column":8,"nodeType":"196","messageId":"197","endLine":4,"endColumn":18},{"ruleId":"194","severity":1,"message":"225","line":1,"column":17,"nodeType":"196","messageId":"197","endLine":1,"endColumn":25},{"ruleId":"194","severity":1,"message":"244","line":1,"column":27,"nodeType":"196","messageId":"197","endLine":1,"endColumn":36},{"ruleId":"194","severity":1,"message":"239","line":5,"column":8,"nodeType":"196","messageId":"197","endLine":5,"endColumn":24},{"ruleId":"194","severity":1,"message":"245","line":1,"column":17,"nodeType":"196","messageId":"197","endLine":1,"endColumn":28},{"ruleId":"246","severity":1,"message":"247","line":85,"column":9,"nodeType":"243","endLine":95,"endColumn":10},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'addEdge' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'setEdges' and 'setNodes'. Either include them or remove the dependency array.","ArrayExpression",["248"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'axios' is defined but never used.","Expected '!==' and instead saw '!='.","'Button' is defined but never used.","'red' is defined but never used.","'handleStyle' is assigned a value but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'CardActionArea' is defined but never used.","'CardActions' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Typography' is defined but never used.","'Stack' is defined but never used.","'fontSize' is defined but never used.","'nlpType' is assigned a value but never used.","'handleNLPTypeChange' is assigned a value but never used.","'Chip' is defined but never used.","'CircularProgress' is defined but never used.","'Box' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useCallback' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.",{"desc":"249","fix":"250"},"Update the dependencies array to be: [setEdges, setNodes]",{"range":"251","text":"252"},[4260,4262],"[setEdges, setNodes]"]